<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>chatting</title>
  <script src="/socket.io/socket.io.js"></script>
  <style>
    /* 채팅창 UI */
    .chat-list{
      background-color: skyblue;
      width: 50%;
      height: 500px;
      padding: 10px;
      overflow-y: auto;
    }
    .chat-list div{margin-top: 3px}
    .chat-list div div {
      display: inline-block;
      padding: 3px;
    }
    .my-chat{text-align: right;}
    .my-chat div{background-color: yellow;}
    .other-chat div{background-color: white;}

    .notice{
      text-align: center;
      color: #005397;
      font-size: 12px;
    }
    /* 실습 5 */
    .d-none{display: none;}
    .secret-chat div{background-color: pink;}
  </style>
</head>
<body>
  <h1>My Chat</h1>
  <!-- 실습 1. 각 버튼 누를 때 마다 서버로 메시지 보내기 -->
  <!-- <button onclick="sayHello()">Hello</button>
  <p id="server-result"></p> -->

  <button type="button" class="join-btn" onclick="join()">입장</button>
  <main class="chat-box d-none">
    <div class="chat-list">
      <!-- 임시 대화 데이터 -->
      <!-- <div class="my-chat">
        <div>user1: msg1</div>
      </div>
      <div class="other-chat">
        <div>user2: msg2</div>
      </div> -->
    </div>

    <!-- 메시지 전송 영역 -->
    <select name="" id="user-list"></select>에게
    <input type="text" id="message" onkeydown="if(window.event.keyCode == 13){send()}">
    <button type="button" onclick="send()">전송</button>
  </main>

  <script>
    // 클라이언트 소켓 객체 생성
    const socket = io.connect();

    socket.on('connect', () => {
      console.log('클라이언트 연결 완료 >', socket.id);
    });

    // 실습 1
    // hello emit
    // function sayHello(){
    //   socket.emit('hello', {
    //     who: 'jerry',
    //     msg: 'hello'
    //   });
    // }

    // helloKR on
    // socket.on('helloKR', (data) => {
    //   console.log(data);
    //   document.getElementById('server-result').innerText
    //     = `${data.who} : ${data.msg}`
    // })

    // 실습 2
    socket.on('notice', (msg) => {
      document.querySelector('.chat-list').insertAdjacentElement('beforeend', `<div class='notice'>${msg}</div>`)
    })

    // 실습 4. Step1 서버에 보내기
    function send(){
      const data = {
        dm: document.getElementById('user-list').value,
        id: socket.id,
        msg: document.getElementById('message').value
      }
      socket.emit('send', data);
      document.getElementById('message').value = '';  //인풋 초기화
    }

    // 실습 4. Step2 서버에서 받아서 보여주기
    socket.on('newMessage', (data) => {
      const chatList = document.querySelector('.chat-list');
      const div = document.createElement('div');
      const divChat = document.createElement('div');

      if(data.id === socket.id){
        div.classList.add('my-chat');
      }else{
        div.classList.add('other-chat')
      }

      if(data.dm){
        div.classList.add('secret-chat');
        divChat.textContent = data.dm;
      }

      divChat.textContent += `${data.id} : ${data.msg}`;
      div.append(divChat);
      chatList.append(div);

      chatList.scrollTop = chatList.scrollHeight;
    })

    // 실습 5.
    function join(){
      socket.emit('setUserList', {
        id: socket.id
      })
    }

    // 입장 성공: 입장 버튼 비활성화, 채팅창 보이기
    socket.on('entrySuccess', (id) => {
      document.querySelector('.join-btn').disabled = true;
      // 채팅창 보이기
      document.querySelector('.chat-box').classList.remove('d-none');
    })

    // 유저 목록 업데이트(select 박스의 option 태그 개수 변경)
    socket.on('updateUsers', (userObjs) => {
      console.log('userList >', userObjs);

      let options = `<option value='all'>전체</option>`;

      // todo: userObjs 반복 돌아서 option 태그 추가
      // option 태그의 value 값 socket.id 값
      for(let key in userObjs){
        //본인 제외
        if(key !== socket.id){
          options += `<option value=${key}>${key}</option>`
        }
      }
      document.querySelector('#user-list').innerHTML = options;
    })
  </script>
</body>
</html>